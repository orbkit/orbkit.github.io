General Aspects
===============

This chapter explains in general how to use detCI\@ORBKIT to process multi-determinantal wavefunctions.
For specific examples, please refer to the orbkit examples folder.
Here, you can find two tutorials: one for a complex superposition states of :math:`{\rm H}_3^+` and 
one for a superposition state of :math:`{\rm LiH}`.
These examples describe how to reproduce the results shown in

  Vincent Pohl, Gunter Hermann, and Jean Christophe Tremblay,
  "An Open-Source Framework of Analyzing *N*-electron Dynamics: I. Multi-Determinantal Wave Functions", 
  `arXiv:XXX.XXXXX`__ (2017).

__ http://arxiv.org/abs/XXX.XXXXX

detCI\@ORBKIT currently supports the following output file formats:

+----------------+---------------------+-----------------------------+----------------+----------------------------------------+--------------------+
| **QC Program** | **Level of Theory** | **Ground State QC-Data**    | **CI-Data**    | **Example File**                       | **itype**          |
+----------------+---------------------+-----------------------------+----------------+----------------------------------------+--------------------+
| PSI4           | All CI calculations | :ref:`Molden File`          | Output file    | :download:`psi4.in <downloads/psi4.in>`| **'psi4_detci'**   |
+----------------+---------------------+-----------------------------+----------------+----------------------------------------+--------------------+ 
| GAMESS-US      | CIS                 | :ref:`GAMESS-US Output File`| Output file    | cis.inp                                | **'gamess_cis'**   |
+----------------+---------------------+-----------------------------+----------------+----------------------------------------+--------------------+ 
| Turbomole      | TD-DFT              | :ref:`AOMix File`           | "sing_a" file  |                                        | **'tmol_tddft'**   |
+----------------+---------------------+-----------------------------+----------------+----------------------------------------+--------------------+ 
| MOLPRO         | MCSCF               | :ref:`Molden File`          | Output file    | casscf.inp                             | **'molpro_mcscf'** |
+----------------+---------------------+-----------------------------+----------------+----------------------------------------+--------------------+ 

.. Note::
  
  The underlying ORBKIT modules are called using :ref:`Low-Level Interface`.


How to Read the Quantum Chemistry Output
========================================

After importing the ``orbkit.read`` module and the detCI\@ORBKIT module, i.e.::
  
  from orbkit import read, detci
  
we have to read the ground state quantum chemistry data 
(molecular geometry, atomic and molecular orbital data)::

  qc = read.main_read(fid_molden,itype='molden',all_mo=True) 

Here, the quantum chemistry output is parsed to an instance of the ``QCinfo`` class 
(cf. :ref:`Central Variables`). Please note that we have to read the occupied 
*and* the virtual molecular orbitals (``all_mo``).

In a similar manner, we can read the CI output::

  ci = detci.ci_read.main_ci_read(qc,fid_psi4,itype='psi4_detci',threshold=0.0)

where ``threshold`` specifies a read threshold for the CI coefficients,
which can considerably reduce the compational time. 
The output variable is an instance of the ``CIinfo`` class (cf. :ref:`Central Variables`).

.. Attention::
 
  The function ``main_ci_read`` changes its first argument (the ``QCinfo`` instance).
  Within this class the molecular orbitals are reordered according to their symmetry.
  This is required for all subsequent calculations. 

How to Prepare All Subsequent Calculations
==========================================

The starting point for all grid-based detCI@ORBKIT calculations
is to compute the molecular orbitals :math:`\varphi_a({\bf r})` and the derivatives thereof 
(:math:`\nabla\varphi_a({\bf r})` and :math:`\nabla^2\varphi_a({\bf r})`)::

  from orbkit import grid,core
  # Set up the grid
  grid.adjust_to_geo(qc,extend=5.0,step=0.1)
  grid.grid_init()    
  print(grid.get_grid())

  # Compute the molecular orbitals and their derviatives
  molist = core.rho_compute(qc,
                            calc_mo=True,
                            slice_length=1e4,           # Length of grid slice
                            drv=[None,                  # No derivative
                                'x','y','z',            # First derviatives
                                'xx','yy','zz'],        # Second derivatives
                            numproc=4)                  # Number of subprocesses
  molistdrv = molist[1:4]                               # \nabla of MOs
  molistdrv2 = molist[-3:]                              # \nabla^2 of MOs
  molist = molist[0]                                    # MOs

Non grid-based calculations, i.e., the electron number, dipole moments in length and velocity gauge,
require several expectation values, i.e., :math:`\langle\varphi_a|\varphi_b\rangle`, 
:math:`\langle\varphi_a|{\bf r}|\varphi_b\rangle`, and :math:`\langle\varphi_a|\nabla|\varphi_b\rangle` ::


  from orbkit.analytical_integrals import get_ao_overlap,get_mo_overlap_matrix
  from orbkit.analytical_integrals import get_ao_dipole_matrix
  aoom = get_ao_overlap(qc.geo_spec,qc.geo_spec,qc.ao_spec,
                        ao_spherical=qc.ao_spherical,
                        drv=[None,                      # No derivative
                            'x','y','z'])               # First derviatives
  dm_aoom = get_ao_dipole_matrix(qc,component=['x','y','z'])

  moom = get_mo_overlap_matrix(qc.mo_spec,qc.mo_spec,aoom[0],
                               numproc=4)               # <a|b>
  omr = numpy.zeros((3,) + moom.shape)                  # <a|r|b>
  omv = numpy.zeros((3,) + moom.shape)                  # <a|\nabla|b>
  for i in range(3):
    omr[i] = get_mo_overlap_matrix(qc.mo_spec,qc.mo_spec,dm_aoom[i],numproc=4)
    omv[i] = get_mo_overlap_matrix(qc.mo_spec,qc.mo_spec,aoom[i+1] ,numproc=4)


Grid-Based Calculations
-----------------------

.. _`Electron Density`:

Electron Density
----------------

.. _`Electronic Flux Density`:

Electronic Flux Density
-----------------------

Non Grid-Based Calculations
---------------------------

Electron Number
---------------

.. _`Electronic Dipole Moment`:

Electronic Dipole Moment
------------------------
